import { INITIAL_SESSION, MY_ACCOUNT, TARIFS } from '../../constants/index.js'
import { db } from '../../db/index.js'
import * as events from 'events'

export const keyboardMyAccount = async (bot, msg) => {
  try {
    let accountMessage
    const { id: chatId } = msg.chat
    const msgId = msg.message_id
    const { id } = msg.from
    // TODO: —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
    const generalOptions = {
      parse_mode: 'HTML',
      reply_to_message_id: msgId,
      disable_web_page_preview: true
    }
    // TODO: —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
    const firstLevel = {
      message: MY_ACCOUNT,
      options: {
        ...generalOptions,
        reply_markup: {
          inline_keyboard: [
            [{ text: '–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'buy_subscription' }],
            [{ text: '–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å', callback_data: 'referral_program' }]
          ]
        }
      }
    }
    // TODO: —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
    const buyLevel = {
      message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏.',
      options: {
        ...generalOptions,
        reply_markup: {
          inline_keyboard: [
            [{ text: TARIFS[0].text, callback_data: TARIFS[0].callback_data }],
            [{ text: TARIFS[1].text, callback_data: TARIFS[1].callback_data }],
            [{ text: TARIFS[2].text, callback_data: TARIFS[2].callback_data }],
            [{ text: TARIFS[3].text, callback_data: TARIFS[3].callback_data }],
            [{ text: TARIFS[4].text, callback_data: TARIFS[4].callback_data }],
            [{ text: TARIFS[5].text, callback_data: TARIFS[5].callback_data }],
            [{ text: TARIFS[6].text, callback_data: TARIFS[6].callback_data }],
            [{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: 'get_first_level' }]
          ]
        }
      }
    }
    // TODO: —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
    // TODO: —Å–¥–µ–ª–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É
    const referralLevel = {
      message: 'ü§ù –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –∑–∞–ø—Ä–æ—Å—ã —Å –Ω–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π\n' +
        '\n' +
        '–° –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ: 3 –∑–∞–ø—Ä–æ—Å–∞ ChatGPT –∏ 1 –∑–∞–ø—Ä–æ—Å Midjourney\n' +
        '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è –≤–∞–º–∏ —á–µ–ª–æ–≤–µ–∫: 0\n' +
        '\n' +
        '–í–∞—à–∞ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/XXX?start=user-XXX',
      options: {
        ...generalOptions,
        reply_markup: {
          inline_keyboard: [
            [{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: 'get_first_level' }]
          ]
        }
      }
    }

    msg['ctx'] = INITIAL_SESSION

    var eventEmitter = new events.EventEmitter()

    eventEmitter.on('referral_program', async function() {
      console.log('referral_program')
      await bot.editMessageText(
        'text',
        {
          message_id: accountMessage.message_id,
          chat_id: chatId
        }
      )
    })

    eventEmitter.on('buy_subscription', async function() {
      console.log('buy_subscription')
      await bot.editMessageText(
        buyLevel.message,
        {
          message_id: accountMessage.message_id,
          chat_id: chatId,
          ...buyLevel.options
        }
      )
    })

    eventEmitter.on('referral_program', async function() {
      await bot.editMessageText(
        referralLevel.message,
        {
          message_id: accountMessage.message_id,
          chat_id: chatId,
          ...referralLevel.options
        }
      )
    })

    eventEmitter.on('get_first_level', function() {
      console.log('buy_subscription', accountMessage.message_id)
      bot.editMessageText(
        firstLevel.message,
        {
          message_id: accountMessage.message_id,
          chat_id: chatId,
          ...firstLevel.options
        }
      )
    })

    for (let i = 0; i < TARIFS.length; i++) {
      eventEmitter.on(TARIFS[i].callback_data, function() {
        // TODO: –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –æ–ø–ª–∞—Ç—ã
        console.log('üíö ', TARIFS[i].text)
      })
    }

    bot.on('callback_query', function onCallbackQuery(callbackQuery) {
      eventEmitter.emit(callbackQuery.data)
      bot.answerCallbackQuery(callbackQuery.id, 'I\'m cold and I want to eat', false)
    })


    db.subscriber.findOne({
      where: {
        chat_id: chatId
      }
    }).then(async (res) => {
      if (!res)
        return
      let mode
      switch (res?.dataValues.mode) {
        case '/midjourney':
          mode = 'MidJourney'
          break
        case '/gpt':
          mode = 'ChatGPT'
          break
        default:
          mode = '.'
      }

      accountMessage = await bot.sendMessage(
        chatId,
        'üîê',
        generalOptions
      )

      const timeout = setTimeout(() => {
        // TODO: –°–¥–µ–ª–∞—Ç—å –ø–æ–¥—Å—á–µ—Ç –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ
        accountMessage = bot.editMessageText(
          firstLevel.message,
          {
            message_id: accountMessage.message_id,
            chat_id: chatId,
            ...firstLevel.options
          }
        )
        clearTimeout(timeout)
      }, 1000)
    })
  } catch (error) {
    await bot.sendMessage(chatId, `${error.message}`, generalOptions)
  }
}
